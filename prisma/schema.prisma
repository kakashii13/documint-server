generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  email  String
  active Boolean @default(true)
  users  User[]
}

model User {
  id            Int         @id @default(autoincrement())
  clientId      Int?
  name          String
  email         String      @unique
  hash_password String?
  role          String
  active        Boolean     @default(false)
  googleId      String?     @unique
  advisors      Advisor[]
  password_reset_tokens PasswordResetToken[]
  invitation    Invitation?
  client        Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user_session UserSession[]
}


model UserSession {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  refreshToken String
  createdAt DateTime @default(now()) 
  expiresAt DateTime
  revokeAt DateTime?

  ip String
  userAgent String

  @@index([userId])
}

model Invitation {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Advisor {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  email  String @unique
  slug   String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id Int @id @default(autoincrement())
  role String @unique
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  userId     Int
  tokenHash  String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}